// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(STUDENT)
  department    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  submittedIssues    Issue[]        @relation("SubmittedBy")
  assignedIssues     Issue[]        @relation("AssignedTo")
  comments           Comment[]
  notifications      Notification[]
  issueStatusUpdates IssueStatus[]

  @@map("users")
}

enum Role {
  STUDENT
  FACULTY
  ADMIN
}

model Issue {
  id          String   @id @default(cuid())
  title       String
  description String
  category    Category
  priority    Priority @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  submittedBy   User          @relation("SubmittedBy", fields: [submittedById], references: [id])
  submittedById String
  assignedTo    User?         @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId  String?
  statuses      IssueStatus[]
  comments      Comment[]
  attachments   Attachment[]

  @@map("issues")
}

enum Category {
  GRADE_DISPUTE
  CLASS_SCHEDULE
  FACULTY_CONCERN
  COURSE_REGISTRATION
  GRADUATION_REQUIREMENT
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model IssueStatus {
  id        String      @id @default(cuid())
  status    StatusType
  notes     String?
  createdAt DateTime    @default(now())

  // Relations
  issue   Issue  @relation(fields: [issueId], references: [id])
  issueId String
  updatedBy   User   @relation(fields: [updatedById], references: [id])
  updatedById String

  @@map("issue_statuses")
}

enum StatusType {
  SUBMITTED
  ASSIGNED
  IN_PROGRESS
  PENDING_INFO
  RESOLVED
  CLOSED
  ESCALATED
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  issue   Issue  @relation(fields: [issueId], references: [id])
  issueId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@map("comments")
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  path      String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())

  // Relations
  issue   Issue  @relation(fields: [issueId], references: [id])
  issueId String

  @@map("attachments")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("notifications")
}

enum NotificationType {
  ISSUE_CREATED
  ISSUE_ASSIGNED
  STATUS_UPDATED
  COMMENT_ADDED
  ISSUE_ESCALATED
}

